# Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо создать класс Клетка. В его
# конструкторе инициализировать параметр, соответствующий количеству ячеек клетки (целое число). В классе должны
# быть реализованы методы перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение
# (__mul__()), деление (__truediv__()). Данные методы должны применяться только к клеткам и выполнять увеличение,
# уменьшение, умножение и целочисленное (с округлением до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух
# клеток. Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек
# двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества ячеек
# этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление количества
# ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный
# метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n*****.
# Подсказка: подробный список операторов для перегрузки доступен по ссылке.

class Cell:
    # =================================================================================================================

    def __init__(self, nucleus):
        self.nucleus = nucleus

    # =================================================================================================================

    def __add__(self, others):
        return Cell(self.nucleus + others.nucleus)

    # =================================================================================================================

    def __sub__(self, others):
        if self.nucleus > others.nucleus:
            return Cell(self.nucleus - others.nucleus)
        else:
            return 'Вычитание не возможно'

    # =================================================================================================================

    def __mul__(self, others):
        return Cell(self.nucleus * others.nucleus)

    # =================================================================================================================

    def __truediv__(self, others):
        return Cell(self.nucleus // others.nucleus)

    # =================================================================================================================

    def make_order(self, numb):
        star = ['*' if i % numb != 0 else '*\n' for i in range(1, self.nucleus + 1)]
        print(''.join(star))

    # =================================================================================================================

    def __str__(self):
        return f"Клетка с ячейками = {self.nucleus}"

    # =================================================================================================================

print('#' * 50)
cell_1 = Cell(12)
cell_1.make_order(5)
print('#' * 50)

cell_2 = Cell(3)
cell_2.make_order(3)
print('#' * 50)


print(cell_1 + cell_2 + cell_1)
print('#' * 50)


print(cell_2 - cell_1)
print(cell_1 - cell_2)
print('#' * 50)


print(cell_1 * cell_2)
print('#' * 50)

print(cell_1 / cell_2)
